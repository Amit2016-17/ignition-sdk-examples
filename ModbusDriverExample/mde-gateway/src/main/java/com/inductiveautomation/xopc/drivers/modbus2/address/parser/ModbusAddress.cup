package com.inductiveautomation.xopc.drivers.modbus.address2.parser;


import com.inductiveautomation.xopc.drivers.modbus2.address.ModbusAddress;
import com.inductiveautomation.xopc.drivers.modbus2.meta.config.AddressType;


parser code {:

	public ModbusAddressParser(java.io.Reader in) {
		super(new ModbusAddressLexer(in));
	}

:};


/* Terminals (tokens returned by the scanner). */
terminal Integer		DIGIT;
terminal String			LETTER;
terminal				BIT_SEPARATOR;
terminal				STRING_SEPARATOR;
terminal				PERIOD;

non terminal ModbusAddress	ModbusAddress;
non terminal String			AddressTypeString;
non terminal Integer		Number;


ModbusAddress		::=		AddressTypeString:s Number:address
							{:	AddressType addressType = AddressType.fromShortString(s); 
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).build(); :} |
							
							AddressTypeString:s Number:address BIT_SEPARATOR Number:bit
							{: 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setBit(bit).build(); :} |
							
							AddressTypeString:s Number:address STRING_SEPARATOR Number:length
							{: 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setStringLength(length).build(); :} |
							
							Number:unitId PERIOD AddressTypeString:s Number:address
							{: 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setUnitId(unitId).build(); :} |
							
							Number:unitId PERIOD AddressTypeString:s Number:address BIT_SEPARATOR Number:bit
							{: 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setUnitId(unitId).setBit(bit).build(); :} |
							
							Number:unitId PERIOD AddressTypeString:s Number:address STRING_SEPARATOR Number:length
							{: 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setUnitId(unitId).setStringLength(length).build(); :};
						
AddressTypeString	::=		LETTER:l {: RESULT = l; :} |
							AddressTypeString:a LETTER:l {: RESULT = a+l; :};

Number				::= 	DIGIT:d {: RESULT = d; :} |
							Number:n DIGIT:d {: RESULT = Integer.parseInt(String.format("%s%s", n, d)); :};
						