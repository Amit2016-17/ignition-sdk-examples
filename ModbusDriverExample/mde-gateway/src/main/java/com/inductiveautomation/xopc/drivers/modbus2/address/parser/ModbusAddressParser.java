
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Apr 25 14:43:47 PDT 2012
//----------------------------------------------------

package com.inductiveautomation.xopc.drivers.modbus2.address.parser;

import com.inductiveautomation.xopc.drivers.modbus2.address.ModbusAddress;
import com.inductiveautomation.xopc.drivers.modbus2.configuration.map.AddressType;

/** CUP v0.10k generated parser.
  * @version Wed Apr 25 14:43:47 PDT 2012
  */
public class ModbusAddressParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ModbusAddressParser() {super();}

  /** Constructor which sets the default scanner. */
  public ModbusAddressParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\003\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\010" +
    "\000\002\003\010\000\002\004\003\000\002\004\004\000" +
    "\002\005\003\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\006\004\010\005\005\001\002\000\006\004" +
    "\010\005\015\001\002\000\006\004\ufffa\005\ufffa\001\002" +
    "\000\006\004\013\010\012\001\002\000\004\002\011\001" +
    "\002\000\014\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\001\002\000\004\002\000\001\002\000\004\005\005\001" +
    "\002\000\014\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\001\002\000\006\004\010\005\015\001\002\000\006\004" +
    "\ufff9\005\ufff9\001\002\000\012\002\ufffd\004\013\006\017" +
    "\007\020\001\002\000\004\004\010\001\002\000\004\004" +
    "\010\001\002\000\006\002\ufffb\004\013\001\002\000\006" +
    "\002\ufffc\004\013\001\002\000\012\002\001\004\013\006" +
    "\024\007\025\001\002\000\004\004\010\001\002\000\004" +
    "\004\010\001\002\000\006\002\ufffe\004\013\001\002\000" +
    "\006\002\uffff\004\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\003\006\004\003\005\005\001\001\000" +
    "\004\005\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\013\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\021\001\001\000\004\005\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\026\001" +
    "\001\000\004\005\025\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ModbusAddressParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ModbusAddressParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ModbusAddressParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public ModbusAddressParser(java.io.Reader in) {
		super(new ModbusAddressLexer(in));
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ModbusAddressParser$actions {
  private final ModbusAddressParser parser;

  /** Constructor */
  CUP$ModbusAddressParser$actions(ModbusAddressParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ModbusAddressParser$do_action(
    int                        CUP$ModbusAddressParser$act_num,
    java_cup.runtime.lr_parser CUP$ModbusAddressParser$parser,
    java.util.Stack            CUP$ModbusAddressParser$stack,
    int                        CUP$ModbusAddressParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ModbusAddressParser$result;

      /* select the action based on the action number */
      switch (CUP$ModbusAddressParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Number ::= Number DIGIT 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 RESULT = Integer.parseInt(String.format("%s%s", n, d)); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(3/*Number*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Number ::= DIGIT 
            {
              Integer RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 RESULT = d; 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(3/*Number*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AddressTypeString ::= AddressTypeString LETTER 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 RESULT = a+l; 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(2/*AddressTypeString*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AddressTypeString ::= LETTER 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 RESULT = l; 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(2/*AddressTypeString*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ModbusAddress ::= Number PERIOD AddressTypeString Number STRING_SEPARATOR Number 
            {
              ModbusAddress RESULT = null;
		int unitIdleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).left;
		int unitIdright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).right;
		Integer unitId = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).value;
		int addressleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).left;
		int addressright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).right;
		Integer address = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setUnitId(unitId).setStringLength(length).build(); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(1/*ModbusAddress*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ModbusAddress ::= Number PERIOD AddressTypeString Number BIT_SEPARATOR Number 
            {
              ModbusAddress RESULT = null;
		int unitIdleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).left;
		int unitIdright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).right;
		Integer unitId = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).value;
		int addressleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).left;
		int addressright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).right;
		Integer address = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).value;
		int bitleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int bitright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer bit = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setUnitId(unitId).setBit(bit).build(); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(1/*ModbusAddress*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ModbusAddress ::= Number PERIOD AddressTypeString Number 
            {
              ModbusAddress RESULT = null;
		int unitIdleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left;
		int unitIdright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).right;
		Integer unitId = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).value;
		int addressleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int addressright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer address = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setUnitId(unitId).build(); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(1/*ModbusAddress*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ModbusAddress ::= AddressTypeString Number STRING_SEPARATOR Number 
            {
              ModbusAddress RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).value;
		int addressleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).left;
		int addressright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).right;
		Integer address = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setStringLength(length).build(); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(1/*ModbusAddress*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ModbusAddress ::= AddressTypeString Number BIT_SEPARATOR Number 
            {
              ModbusAddress RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).value;
		int addressleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).left;
		int addressright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).right;
		Integer address = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-2)).value;
		int bitleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int bitright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer bit = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
		 	AddressType addressType = AddressType.fromShortString(s);
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).setBit(bit).build(); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(1/*ModbusAddress*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ModbusAddress EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).right;
		ModbusAddress start_val = (ModbusAddress)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).value;
		RESULT = start_val;
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ModbusAddressParser$parser.done_parsing();
          return CUP$ModbusAddressParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ModbusAddress ::= AddressTypeString Number 
            {
              ModbusAddress RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).value;
		int addressleft = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).left;
		int addressright = ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right;
		Integer address = (Integer)((java_cup.runtime.Symbol) CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).value;
			AddressType addressType = AddressType.fromShortString(s); 
								RESULT = ModbusAddress.builder(addressType.getModbusTable(), addressType.getModbusDataType(), address).build(); 
              CUP$ModbusAddressParser$result = new java_cup.runtime.Symbol(1/*ModbusAddress*/, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ModbusAddressParser$stack.elementAt(CUP$ModbusAddressParser$top-0)).right, RESULT);
            }
          return CUP$ModbusAddressParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

